//
// File generated by HDevelop for HALCON/.NET (C#) Version 12.0.1
//

using HalconDotNet;

public partial class HDevelopExport
{
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
#endif

    // Procedures 
    public void FindHoleHalfCircleRegion(HObject ho_Image, out HObject ho_OutputRegion,
        HTuple hv_LeftOrRight, HTuple hv_HasPre, HTuple hv_HoughCircleThresholdGrayMin,
        HTuple hv_HoughCircleThresholdGrayMax, HTuple hv_HoughCircleSelectAreaMin, HTuple hv_HoughCircleSelectAreaMax,
        HTuple hv_HoughCircleRadius, HTuple hv_HoughCirclePercent, HTuple hv_MaxLineWidth)
    {




        // Local iconic variables 

        HObject ho_ImageResult = null, ho_Rectangle = null;
        HObject ho_ImageAniso2, ho_RegionsGrowing, ho_OutterRegion;
        HObject ho_RegionOpening1, ho_ConnectedRegions3, ho_RegionDilation3;
        HObject ho_RegionDifference2, ho_ImageReduced2, ho_ImageMean;
        HObject ho_RegionDynThresh, ho_ConnectedRegions2, ho_SelectedRegions2;
        HObject ho_RegionUnion1, ho_RegionDilation2, ho_RegionOut;
        HObject ho_ConnectedRegions4, ho_SortedRegions = null, ho_ImageFull = null;
        HObject ho_Circle2, ho_PolarTransImage, ho_ImageMean1, ho_ImageOpening;
        HObject ho_Region2, ho_ImageReduced1, ho_Regions1, ho_RegionOpening = null;
        HObject ho_ConnectedRegions, ho_SelectedRegions, ho_RegionDilation;
        HObject ho_RegionMoved, ho_RegionDifference, ho_ImageReduced;
        HObject ho_Regions, ho_RegionUnion = null, ho_SelectedRegionsFillUp = null;
        HObject ho_RegionClosing = null, ho_Domain1 = null, ho_RegionDifference1 = null;
        HObject ho_XYTransRegion = null, ho_RegionOpening2 = null, ho_ConnectedRegions1 = null;
        HObject ho_RegionDilation1, ho_SelectedRegions1 = null;

        // Local control variables 

        HTuple hv_PolarAngleStart = new HTuple(), hv_PolarAngleEnd = new HTuple();
        HTuple hv_Width1 = new HTuple(), hv_Height1 = new HTuple();
        HTuple hv_Width = null, hv_Height = null, hv_AreasGrowing = null;
        HTuple hv_MaxAreaGrowing = null, hv_CenterRow = null, hv_CenterCol = null;
        HTuple hv_CenterRowLength = null, hv_CenterColLength = null;
        HTuple hv_FoundOutterRegionCount = null, hv_Areas2 = null;
        HTuple hv_Max2 = null, hv_Area = null, hv_HoughRegionCount = null;
        HTuple hv_AvgLineWidth = null, hv_Areas = new HTuple();
        HTuple hv_Max = new HTuple();
        // Initialize local and output iconic variables 
        HOperatorSet.GenEmptyObj(out ho_OutputRegion);
        HOperatorSet.GenEmptyObj(out ho_ImageResult);
        HOperatorSet.GenEmptyObj(out ho_Rectangle);
        HOperatorSet.GenEmptyObj(out ho_ImageAniso2);
        HOperatorSet.GenEmptyObj(out ho_RegionsGrowing);
        HOperatorSet.GenEmptyObj(out ho_OutterRegion);
        HOperatorSet.GenEmptyObj(out ho_RegionOpening1);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions3);
        HOperatorSet.GenEmptyObj(out ho_RegionDilation3);
        HOperatorSet.GenEmptyObj(out ho_RegionDifference2);
        HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
        HOperatorSet.GenEmptyObj(out ho_ImageMean);
        HOperatorSet.GenEmptyObj(out ho_RegionDynThresh);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions2);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
        HOperatorSet.GenEmptyObj(out ho_RegionUnion1);
        HOperatorSet.GenEmptyObj(out ho_RegionDilation2);
        HOperatorSet.GenEmptyObj(out ho_RegionOut);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions4);
        HOperatorSet.GenEmptyObj(out ho_SortedRegions);
        HOperatorSet.GenEmptyObj(out ho_ImageFull);
        HOperatorSet.GenEmptyObj(out ho_Circle2);
        HOperatorSet.GenEmptyObj(out ho_PolarTransImage);
        HOperatorSet.GenEmptyObj(out ho_ImageMean1);
        HOperatorSet.GenEmptyObj(out ho_ImageOpening);
        HOperatorSet.GenEmptyObj(out ho_Region2);
        HOperatorSet.GenEmptyObj(out ho_ImageReduced1);
        HOperatorSet.GenEmptyObj(out ho_Regions1);
        HOperatorSet.GenEmptyObj(out ho_RegionOpening);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
        HOperatorSet.GenEmptyObj(out ho_RegionDilation);
        HOperatorSet.GenEmptyObj(out ho_RegionMoved);
        HOperatorSet.GenEmptyObj(out ho_RegionDifference);
        HOperatorSet.GenEmptyObj(out ho_ImageReduced);
        HOperatorSet.GenEmptyObj(out ho_Regions);
        HOperatorSet.GenEmptyObj(out ho_RegionUnion);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegionsFillUp);
        HOperatorSet.GenEmptyObj(out ho_RegionClosing);
        HOperatorSet.GenEmptyObj(out ho_Domain1);
        HOperatorSet.GenEmptyObj(out ho_RegionDifference1);
        HOperatorSet.GenEmptyObj(out ho_XYTransRegion);
        HOperatorSet.GenEmptyObj(out ho_RegionOpening2);
        HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
        HOperatorSet.GenEmptyObj(out ho_RegionDilation1);
        HOperatorSet.GenEmptyObj(out ho_SelectedRegions1);
        if ((int)(new HTuple(hv_LeftOrRight.TupleEqual("true"))) != 0)
        {
            hv_PolarAngleStart = (3.14159 / 2) + (3.14159 / 8);
            hv_PolarAngleEnd = ((3.14159 * 3) / 2) - (3.14159 / 8);
        }
        else
        {
            hv_PolarAngleStart = (-3.14159 / 2) + (3.14159 / 8);
            hv_PolarAngleEnd = (3.14159 / 2) - (3.14159 / 8);
        }



        if ((int)((new HTuple(hv_LeftOrRight.TupleEqual("true"))).TupleAnd(new HTuple(hv_HasPre.TupleEqual(
            "true")))) != 0)
        {
            //anisotropic_diffusion (Image, ImageAnisoPreL, 'weickert', 5, 1, 10)
            //binary_threshold (ImageAnisoPreL, RegionPreL, 'max_separability', 'dark', UsedThresholdPreL)
            //connection (RegionPreL, ConnectedRegionsPreL)
            //region_features (ConnectedRegionsPreL, 'area', ValuePreL)
            //tuple_max (ValuePreL, MaxPreL)
            //select_shape (ConnectedRegionsPreL, SelectedRegionsPreL, 'area', 'and', MaxPreL, MaxPreL)
            //reduce_domain (ImageAnisoPreL, SelectedRegionsPreL, ImageReduced1PreL)
            //regiongrowing (ImageReduced1PreL, RegionsPreL, 1, 1, 2, 100)
            //connection (RegionsPreL, ConnectedRegions1PreL)
            //select_shape (ConnectedRegions1PreL, SelectedRegions1PreL, ['area','inner_radius'], 'and', [20000,40], [50000,100])
            //opening_circle (SelectedRegions1PreL, RegionOpeningPreL, 20.5)
            //smallest_rectangle1 (RegionOpeningPreL, Row1PreL, Column1PreL, Row2PreL, Column2PreL)
            //gen_rectangle1 (RectanglePreL, Row1PreL, Column1PreL, Row2PreL, Column2PreL)
            //dilation_rectangle1 (RectanglePreL, RegionDilationPreL, 75, 401)

            //get_domain (ImageAnisoPreL, DomainPreL)
            //intersection (DomainPreL, RegionDilationPreL, RegionIntersectionPreL)
            //difference (DomainPreL, RegionIntersectionPreL, RegionDifferencePreL)
            //reduce_domain (ImageAnisoPreL, RegionDifferencePreL, ImageReducedPreL)
            //mean_image (ImageReducedPreL, ImageMeanPreL, 1, 401)
            //threshold (ImageMeanPreL, Region1PreL, 1, 255)
            //get_image_size (ImageAnisoPreL, WidthPreL, HeightPreL)
            //region_to_bin (Region1PreL, BinImagePreL, 255, 0, WidthPreL, HeightPreL)
            //add_image (BinImagePreL, Image, ImageResult, 1, 0)

            //Above is abondoned at 2016-11-16, for now using relative coordinate
            //New add in 2016-11-16, May add a new param? (col of rectangle2)
            HOperatorSet.GetImageSize(ho_Image, out hv_Width1, out hv_Height1);
            ho_Rectangle.Dispose();
            HOperatorSet.GenRectangle2(out ho_Rectangle, hv_Height1 / 2, 40, 0, 40, hv_Height1 / 2);
            ho_ImageResult.Dispose();
            HOperatorSet.PaintRegion(ho_Rectangle, ho_Image, out ho_ImageResult, 255, "fill");
            //Over

        }
        else if ((int)((new HTuple(hv_LeftOrRight.TupleEqual("false"))).TupleAnd(
            new HTuple(hv_HasPre.TupleEqual("true")))) != 0)
        {
            //anisotropic_diffusion (Image, ImageAnisoPreR, 'weickert', 5, 1, 10)
            //binary_threshold (ImageAnisoPreR, RegionPreR, 'max_separability', 'dark', UsedThresholdPreR)
            //connection (RegionPreR, ConnectedRegionsPreR)
            //select_shape (ConnectedRegionsPreR, SelectedRegionsPreR, ['area','circularity'], 'and', [8000,0.7], [20000,1])
            //smallest_rectangle1 (SelectedRegionsPreR, Row1PreR, Column1PreR, Row2PreR, Column2PreR)
            //gen_rectangle1 (RectanglePreR, Row1PreR, Column1PreR, Row2PreR, Column2PreR)
            //dilation_rectangle1 (RectanglePreR, RegionDilationPreR, 121, 401)
            //move_region (RegionDilationPreR, RegionMovedPreR, 0, -200)
            //dilation_rectangle1 (RegionMovedPreR, RegionDilation1PreR, 401, 1)

            //get_domain (ImageAnisoPreR, DomainPreR)
            //intersection (DomainPreR, RegionDilation1PreR, RegionIntersectionPreR)
            //difference (DomainPreR, RegionIntersectionPreR, RegionDifferencePreR)
            //reduce_domain (ImageAnisoPreR, RegionDifferencePreR, ImageReducedPreR)
            //mean_image (ImageReducedPreR, ImageMeanPreR, 1, 401)
            //threshold (ImageMeanPreR, Region1PreR, 1, 255)
            //get_image_size (ImageAnisoPreR, WidthPreR, HeightPreR)
            //region_to_bin (Region1PreR, BinImagePreR, 255, 0, WidthPreR, HeightPreR)
            //add_image (BinImagePreR, Image, ImageResult, 1, 0)

            //Above is abondoned at 2016-11-16, for now using relative coordinate
            //New add in 2016-11-16, May add a new param? (col of rectangle2)
            HOperatorSet.GetImageSize(ho_Image, out hv_Width1, out hv_Height1);
            ho_Rectangle.Dispose();
            HOperatorSet.GenRectangle2(out ho_Rectangle, hv_Height1 / 2, hv_Width1 - 48, 0,
                48, hv_Height1 / 2);
            ho_ImageResult.Dispose();
            HOperatorSet.PaintRegion(ho_Rectangle, ho_Image, out ho_ImageResult, 255, "fill");
            //Over

            //New added in 2016-10-23(New Para added)
        }
        else if ((int)(new HTuple(hv_HasPre.TupleEqual("false"))) != 0)
        {
            ho_ImageResult.Dispose();
            HOperatorSet.ScaleImage(ho_Image, out ho_ImageResult, 1, 0);
            //Over
        }

        HOperatorSet.GetImageSize(ho_ImageResult, out hv_Width, out hv_Height);

        ho_ImageAniso2.Dispose();
        HOperatorSet.AnisotropicDiffusion(ho_ImageResult, out ho_ImageAniso2, "weickert",
            5, 1, 10);

        ho_RegionsGrowing.Dispose();
        HOperatorSet.Regiongrowing(ho_ImageAniso2, out ho_RegionsGrowing, 1, 1, 2, 10);
        HOperatorSet.RegionFeatures(ho_RegionsGrowing, "area", out hv_AreasGrowing);
        HOperatorSet.TupleMax(hv_AreasGrowing, out hv_MaxAreaGrowing);
        ho_OutterRegion.Dispose();
        HOperatorSet.SelectShape(ho_RegionsGrowing, out ho_OutterRegion, "area", "and",
            hv_MaxAreaGrowing, hv_MaxAreaGrowing);
        ho_RegionOpening1.Dispose();
        HOperatorSet.OpeningCircle(ho_OutterRegion, out ho_RegionOpening1, 3.5);
        ho_ConnectedRegions3.Dispose();
        HOperatorSet.Connection(ho_RegionOpening1, out ho_ConnectedRegions3);


        ho_RegionDilation3.Dispose();
        HOperatorSet.DilationCircle(ho_RegionOpening1, out ho_RegionDilation3, 19);
        ho_RegionDifference2.Dispose();
        HOperatorSet.Difference(ho_RegionDilation3, ho_RegionOpening1, out ho_RegionDifference2
            );
        ho_ImageReduced2.Dispose();
        HOperatorSet.ReduceDomain(ho_ImageAniso2, ho_RegionDifference2, out ho_ImageReduced2
            );

        ho_ImageMean.Dispose();
        HOperatorSet.MeanImage(ho_ImageReduced2, out ho_ImageMean, 11, 11);
        ho_RegionDynThresh.Dispose();
        HOperatorSet.DynThreshold(ho_ImageReduced2, ho_ImageMean, out ho_RegionDynThresh,
            7, "dark");



        ho_ConnectedRegions2.Dispose();
        HOperatorSet.Connection(ho_RegionDynThresh, out ho_ConnectedRegions2);
        ho_SelectedRegions2.Dispose();
        HOperatorSet.SelectShape(ho_ConnectedRegions2, out ho_SelectedRegions2, "area",
            "and", hv_HoughCircleSelectAreaMin, hv_HoughCircleSelectAreaMax);
        ho_RegionUnion1.Dispose();
        HOperatorSet.Union1(ho_SelectedRegions2, out ho_RegionUnion1);

        ho_RegionDilation2.Dispose();
        HOperatorSet.DilationCircle(ho_RegionUnion1, out ho_RegionDilation2, 1.5);


        ho_RegionOut.Dispose();
        HOperatorSet.HoughCircles(ho_RegionDilation2, out ho_RegionOut, hv_HoughCircleRadius,
            hv_HoughCirclePercent, 0);

        //New added in 2016-10-23
        ho_ConnectedRegions4.Dispose();
        HOperatorSet.Connection(ho_RegionOut, out ho_ConnectedRegions4);
        if ((int)(new HTuple(hv_LeftOrRight.TupleEqual("true"))) != 0)
        {
            ho_SortedRegions.Dispose();
            HOperatorSet.SortRegion(ho_ConnectedRegions4, out ho_SortedRegions, "character",
                "true", "column");
        }
        else if ((int)(new HTuple(hv_LeftOrRight.TupleEqual("false"))) != 0)
        {
            ho_SortedRegions.Dispose();
            HOperatorSet.SortRegion(ho_ConnectedRegions4, out ho_SortedRegions, "character",
                "false", "column");
        }
        ho_RegionOut.Dispose();
        HOperatorSet.SelectObj(ho_SortedRegions, out ho_RegionOut, 1);
        //Over

        HOperatorSet.RegionFeatures(ho_RegionOut, "row", out hv_CenterRow);
        HOperatorSet.RegionFeatures(ho_RegionOut, "column", out hv_CenterCol);

        HOperatorSet.TupleLength(hv_CenterRow, out hv_CenterRowLength);
        HOperatorSet.TupleLength(hv_CenterCol, out hv_CenterColLength);
        if ((int)((new HTuple(hv_CenterRowLength.TupleEqual(0))).TupleOr(new HTuple(hv_CenterColLength.TupleEqual(
            0)))) != 0)
        {
            ho_ImageFull.Dispose();
            HOperatorSet.FullDomain(ho_ImageResult, out ho_ImageFull);
            ho_OutputRegion.Dispose();
            HOperatorSet.GetDomain(ho_ImageFull, out ho_OutputRegion);
            ho_ImageResult.Dispose();
            ho_Rectangle.Dispose();
            ho_ImageAniso2.Dispose();
            ho_RegionsGrowing.Dispose();
            ho_OutterRegion.Dispose();
            ho_RegionOpening1.Dispose();
            ho_ConnectedRegions3.Dispose();
            ho_RegionDilation3.Dispose();
            ho_RegionDifference2.Dispose();
            ho_ImageReduced2.Dispose();
            ho_ImageMean.Dispose();
            ho_RegionDynThresh.Dispose();
            ho_ConnectedRegions2.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_RegionUnion1.Dispose();
            ho_RegionDilation2.Dispose();
            ho_RegionOut.Dispose();
            ho_ConnectedRegions4.Dispose();
            ho_SortedRegions.Dispose();
            ho_ImageFull.Dispose();
            ho_Circle2.Dispose();
            ho_PolarTransImage.Dispose();
            ho_ImageMean1.Dispose();
            ho_ImageOpening.Dispose();
            ho_Region2.Dispose();
            ho_ImageReduced1.Dispose();
            ho_Regions1.Dispose();
            ho_RegionOpening.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_RegionDilation.Dispose();
            ho_RegionMoved.Dispose();
            ho_RegionDifference.Dispose();
            ho_ImageReduced.Dispose();
            ho_Regions.Dispose();
            ho_RegionUnion.Dispose();
            ho_SelectedRegionsFillUp.Dispose();
            ho_RegionClosing.Dispose();
            ho_Domain1.Dispose();
            ho_RegionDifference1.Dispose();
            ho_XYTransRegion.Dispose();
            ho_RegionOpening2.Dispose();
            ho_ConnectedRegions1.Dispose();
            ho_RegionDilation1.Dispose();
            ho_SelectedRegions1.Dispose();

            return;
        }

        ho_Circle2.Dispose();
        HOperatorSet.GenCircle(out ho_Circle2, hv_CenterRow, hv_CenterCol, hv_HoughCircleRadius);


        ho_PolarTransImage.Dispose();
        HOperatorSet.PolarTransImageExt(ho_ImageResult, out ho_PolarTransImage, hv_CenterRow,
            hv_CenterCol, hv_PolarAngleStart, hv_PolarAngleEnd, 0, hv_HoughCircleRadius * 2.1,
            hv_HoughCircleRadius * 2.1, hv_HoughCircleRadius * 2.1, "bilinear");

        ho_ImageMean1.Dispose();
        HOperatorSet.MeanImage(ho_PolarTransImage, out ho_ImageMean1, 21, 1);
        ho_ImageOpening.Dispose();
        HOperatorSet.GrayOpeningRect(ho_ImageMean1, out ho_ImageOpening, 3, 11);
        //anisotropic_diffusion (ImageOpening, ImageAniso3, 'weickert', 5, 1, 3)



        ho_Region2.Dispose();
        HOperatorSet.Threshold(ho_ImageOpening, out ho_Region2, 230, 255);
        ho_ImageReduced1.Dispose();
        HOperatorSet.ReduceDomain(ho_ImageOpening, ho_Region2, out ho_ImageReduced1);
        ho_Regions1.Dispose();
        HOperatorSet.Regiongrowing(ho_ImageReduced1, out ho_Regions1, 1, 1, 1, 100);

        //opening_rectangle1 (Region2, RegionOpening, 11, 3)
        ho_ConnectedRegions.Dispose();
        HOperatorSet.Connection(ho_Regions1, out ho_ConnectedRegions);

        HOperatorSet.CountObj(ho_ConnectedRegions, out hv_FoundOutterRegionCount);

        if ((int)(new HTuple(hv_FoundOutterRegionCount.TupleEqual(0))) != 0)
        {
            ho_ImageFull.Dispose();
            HOperatorSet.FullDomain(ho_ImageResult, out ho_ImageFull);
            ho_OutputRegion.Dispose();
            HOperatorSet.GetDomain(ho_ImageFull, out ho_OutputRegion);
            ho_ImageResult.Dispose();
            ho_Rectangle.Dispose();
            ho_ImageAniso2.Dispose();
            ho_RegionsGrowing.Dispose();
            ho_OutterRegion.Dispose();
            ho_RegionOpening1.Dispose();
            ho_ConnectedRegions3.Dispose();
            ho_RegionDilation3.Dispose();
            ho_RegionDifference2.Dispose();
            ho_ImageReduced2.Dispose();
            ho_ImageMean.Dispose();
            ho_RegionDynThresh.Dispose();
            ho_ConnectedRegions2.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_RegionUnion1.Dispose();
            ho_RegionDilation2.Dispose();
            ho_RegionOut.Dispose();
            ho_ConnectedRegions4.Dispose();
            ho_SortedRegions.Dispose();
            ho_ImageFull.Dispose();
            ho_Circle2.Dispose();
            ho_PolarTransImage.Dispose();
            ho_ImageMean1.Dispose();
            ho_ImageOpening.Dispose();
            ho_Region2.Dispose();
            ho_ImageReduced1.Dispose();
            ho_Regions1.Dispose();
            ho_RegionOpening.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_RegionDilation.Dispose();
            ho_RegionMoved.Dispose();
            ho_RegionDifference.Dispose();
            ho_ImageReduced.Dispose();
            ho_Regions.Dispose();
            ho_RegionUnion.Dispose();
            ho_SelectedRegionsFillUp.Dispose();
            ho_RegionClosing.Dispose();
            ho_Domain1.Dispose();
            ho_RegionDifference1.Dispose();
            ho_XYTransRegion.Dispose();
            ho_RegionOpening2.Dispose();
            ho_ConnectedRegions1.Dispose();
            ho_RegionDilation1.Dispose();
            ho_SelectedRegions1.Dispose();

            return;
        }

        HOperatorSet.RegionFeatures(ho_ConnectedRegions, "area", out hv_Areas2);
        HOperatorSet.TupleMax(hv_Areas2, out hv_Max2);
        ho_SelectedRegions.Dispose();
        HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area",
            "and", hv_Max2, hv_Max2);
        ho_RegionDilation.Dispose();
        HOperatorSet.DilationRectangle1(ho_SelectedRegions, out ho_RegionDilation, 10,
            1);

        ho_RegionMoved.Dispose();
        HOperatorSet.MoveRegion(ho_RegionDilation, out ho_RegionMoved, 0 - hv_MaxLineWidth,
            0);
        ho_RegionDifference.Dispose();
        HOperatorSet.Difference(ho_RegionMoved, ho_RegionDilation, out ho_RegionDifference
            );


        ho_ImageReduced.Dispose();
        HOperatorSet.ReduceDomain(ho_ImageOpening, ho_RegionDifference, out ho_ImageReduced
            );

        ho_Regions.Dispose();
        HOperatorSet.Threshold(ho_ImageReduced, out ho_Regions, 0, 216);

        HOperatorSet.RegionFeatures(ho_Regions, "area", out hv_Area);
        HOperatorSet.CountObj(ho_Regions, out hv_HoughRegionCount);

        if ((int)(new HTuple(hv_HoughRegionCount.TupleEqual(0))) != 0)
        {
            ho_ImageFull.Dispose();
            HOperatorSet.FullDomain(ho_ImageResult, out ho_ImageFull);
            ho_OutputRegion.Dispose();
            HOperatorSet.GetDomain(ho_ImageFull, out ho_OutputRegion);
            ho_ImageResult.Dispose();
            ho_Rectangle.Dispose();
            ho_ImageAniso2.Dispose();
            ho_RegionsGrowing.Dispose();
            ho_OutterRegion.Dispose();
            ho_RegionOpening1.Dispose();
            ho_ConnectedRegions3.Dispose();
            ho_RegionDilation3.Dispose();
            ho_RegionDifference2.Dispose();
            ho_ImageReduced2.Dispose();
            ho_ImageMean.Dispose();
            ho_RegionDynThresh.Dispose();
            ho_ConnectedRegions2.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_RegionUnion1.Dispose();
            ho_RegionDilation2.Dispose();
            ho_RegionOut.Dispose();
            ho_ConnectedRegions4.Dispose();
            ho_SortedRegions.Dispose();
            ho_ImageFull.Dispose();
            ho_Circle2.Dispose();
            ho_PolarTransImage.Dispose();
            ho_ImageMean1.Dispose();
            ho_ImageOpening.Dispose();
            ho_Region2.Dispose();
            ho_ImageReduced1.Dispose();
            ho_Regions1.Dispose();
            ho_RegionOpening.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_RegionDilation.Dispose();
            ho_RegionMoved.Dispose();
            ho_RegionDifference.Dispose();
            ho_ImageReduced.Dispose();
            ho_Regions.Dispose();
            ho_RegionUnion.Dispose();
            ho_SelectedRegionsFillUp.Dispose();
            ho_RegionClosing.Dispose();
            ho_Domain1.Dispose();
            ho_RegionDifference1.Dispose();
            ho_XYTransRegion.Dispose();
            ho_RegionOpening2.Dispose();
            ho_ConnectedRegions1.Dispose();
            ho_RegionDilation1.Dispose();
            ho_SelectedRegions1.Dispose();

            return;
        }

        hv_AvgLineWidth = hv_Area / (hv_HoughCircleRadius * 2.1);

        if ((int)(new HTuple(hv_AvgLineWidth.TupleLess(1.0))) != 0)
        {
            ho_RegionUnion.Dispose();
            HOperatorSet.Union2(ho_SelectedRegions, ho_Regions, out ho_RegionUnion);

            ho_SelectedRegionsFillUp.Dispose();
            HOperatorSet.FillUp(ho_RegionUnion, out ho_SelectedRegionsFillUp);
            ho_RegionClosing.Dispose();
            HOperatorSet.ClosingCircle(ho_SelectedRegionsFillUp, out ho_RegionClosing,
                3.5);
            ho_RegionOpening.Dispose();
            HOperatorSet.OpeningCircle(ho_RegionClosing, out ho_RegionOpening, 3.5);

            ho_Domain1.Dispose();
            HOperatorSet.GetDomain(ho_PolarTransImage, out ho_Domain1);
            ho_RegionDifference1.Dispose();
            HOperatorSet.Difference(ho_Domain1, ho_RegionOpening, out ho_RegionDifference1
                );
            ho_XYTransRegion.Dispose();
            HOperatorSet.PolarTransRegionInv(ho_RegionDifference1, out ho_XYTransRegion,
                hv_CenterRow, hv_CenterCol, hv_PolarAngleStart, hv_PolarAngleEnd, 0, hv_HoughCircleRadius * 2.1,
                hv_HoughCircleRadius * 2.1, hv_HoughCircleRadius * 2.1, hv_Width, hv_Height,
                "bilinear");

            ho_RegionOpening2.Dispose();
            HOperatorSet.OpeningRectangle1(ho_XYTransRegion, out ho_RegionOpening2, 1,
                5);

            ho_ConnectedRegions1.Dispose();
            HOperatorSet.Connection(ho_RegionOpening2, out ho_ConnectedRegions1);
            HOperatorSet.RegionFeatures(ho_ConnectedRegions1, "area", out hv_Areas);
            HOperatorSet.TupleMax(hv_Areas, out hv_Max);
            ho_OutputRegion.Dispose();
            HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_OutputRegion, "area",
                "and", hv_Max, hv_Max);

            ho_ImageResult.Dispose();
            ho_Rectangle.Dispose();
            ho_ImageAniso2.Dispose();
            ho_RegionsGrowing.Dispose();
            ho_OutterRegion.Dispose();
            ho_RegionOpening1.Dispose();
            ho_ConnectedRegions3.Dispose();
            ho_RegionDilation3.Dispose();
            ho_RegionDifference2.Dispose();
            ho_ImageReduced2.Dispose();
            ho_ImageMean.Dispose();
            ho_RegionDynThresh.Dispose();
            ho_ConnectedRegions2.Dispose();
            ho_SelectedRegions2.Dispose();
            ho_RegionUnion1.Dispose();
            ho_RegionDilation2.Dispose();
            ho_RegionOut.Dispose();
            ho_ConnectedRegions4.Dispose();
            ho_SortedRegions.Dispose();
            ho_ImageFull.Dispose();
            ho_Circle2.Dispose();
            ho_PolarTransImage.Dispose();
            ho_ImageMean1.Dispose();
            ho_ImageOpening.Dispose();
            ho_Region2.Dispose();
            ho_ImageReduced1.Dispose();
            ho_Regions1.Dispose();
            ho_RegionOpening.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_RegionDilation.Dispose();
            ho_RegionMoved.Dispose();
            ho_RegionDifference.Dispose();
            ho_ImageReduced.Dispose();
            ho_Regions.Dispose();
            ho_RegionUnion.Dispose();
            ho_SelectedRegionsFillUp.Dispose();
            ho_RegionClosing.Dispose();
            ho_Domain1.Dispose();
            ho_RegionDifference1.Dispose();
            ho_XYTransRegion.Dispose();
            ho_RegionOpening2.Dispose();
            ho_ConnectedRegions1.Dispose();
            ho_RegionDilation1.Dispose();
            ho_SelectedRegions1.Dispose();

            return;
        }


        ho_RegionDilation1.Dispose();
        HOperatorSet.DilationCircle(ho_RegionDilation, out ho_RegionDilation1, hv_AvgLineWidth / 2.0);
        ho_Domain1.Dispose();
        HOperatorSet.GetDomain(ho_PolarTransImage, out ho_Domain1);
        ho_RegionDifference1.Dispose();
        HOperatorSet.Difference(ho_Domain1, ho_RegionDilation1, out ho_RegionDifference1
            );


        ho_XYTransRegion.Dispose();
        HOperatorSet.PolarTransRegionInv(ho_RegionDifference1, out ho_XYTransRegion,
            hv_CenterRow, hv_CenterCol, hv_PolarAngleStart, hv_PolarAngleEnd, 0, hv_HoughCircleRadius * 2.1,
            hv_HoughCircleRadius * 2.1, hv_HoughCircleRadius * 2.1, hv_Width, hv_Height,
            "bilinear");


        ho_ConnectedRegions1.Dispose();
        HOperatorSet.Connection(ho_XYTransRegion, out ho_ConnectedRegions1);
        //New added in 2016-10-23, set column2 a param later, and check for left.
        if ((int)(new HTuple(hv_LeftOrRight.TupleEqual("false"))) != 0)
        {
            ho_SelectedRegions1.Dispose();
            HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions1, "column2",
                "and", 0, (hv_CenterCol + hv_HoughCircleRadius) + 10);
            ho_ConnectedRegions1.Dispose();
            HOperatorSet.Connection(ho_SelectedRegions1, out ho_ConnectedRegions1);
        }
        //Over
        HOperatorSet.RegionFeatures(ho_ConnectedRegions1, "area", out hv_Areas);
        HOperatorSet.TupleMax(hv_Areas, out hv_Max);
        ho_OutputRegion.Dispose();
        HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_OutputRegion, "area", "and",
            hv_Max, hv_Max);




        ho_ImageResult.Dispose();
        ho_Rectangle.Dispose();
        ho_ImageAniso2.Dispose();
        ho_RegionsGrowing.Dispose();
        ho_OutterRegion.Dispose();
        ho_RegionOpening1.Dispose();
        ho_ConnectedRegions3.Dispose();
        ho_RegionDilation3.Dispose();
        ho_RegionDifference2.Dispose();
        ho_ImageReduced2.Dispose();
        ho_ImageMean.Dispose();
        ho_RegionDynThresh.Dispose();
        ho_ConnectedRegions2.Dispose();
        ho_SelectedRegions2.Dispose();
        ho_RegionUnion1.Dispose();
        ho_RegionDilation2.Dispose();
        ho_RegionOut.Dispose();
        ho_ConnectedRegions4.Dispose();
        ho_SortedRegions.Dispose();
        ho_ImageFull.Dispose();
        ho_Circle2.Dispose();
        ho_PolarTransImage.Dispose();
        ho_ImageMean1.Dispose();
        ho_ImageOpening.Dispose();
        ho_Region2.Dispose();
        ho_ImageReduced1.Dispose();
        ho_Regions1.Dispose();
        ho_RegionOpening.Dispose();
        ho_ConnectedRegions.Dispose();
        ho_SelectedRegions.Dispose();
        ho_RegionDilation.Dispose();
        ho_RegionMoved.Dispose();
        ho_RegionDifference.Dispose();
        ho_ImageReduced.Dispose();
        ho_Regions.Dispose();
        ho_RegionUnion.Dispose();
        ho_SelectedRegionsFillUp.Dispose();
        ho_RegionClosing.Dispose();
        ho_Domain1.Dispose();
        ho_RegionDifference1.Dispose();
        ho_XYTransRegion.Dispose();
        ho_RegionOpening2.Dispose();
        ho_ConnectedRegions1.Dispose();
        ho_RegionDilation1.Dispose();
        ho_SelectedRegions1.Dispose();

        return;
    }


}
#if !(NO_EXPORT_MAIN || NO_EXPORT_APP_MAIN)
public class HDevelopExportApp
{
  static void Main(string[] args)
  {
    new HDevelopExport();
  }
}
#endif

